"use strict";DocReady.push(function(){var e=window.TAG_TYPES_ASSOC,t=$("#tags").children("tbody"),n=function(e,n){if(!this.status)return $.Dialog.fail(!1,this.message);if("function"==typeof e)return e.call(this,n);e.remove(),$.Dialog.success(!1,this.message);var a=window.location.pathname;0===t.children().length&&(a=a.replace(/(\d+)$/,function(e){return e>1?e-1:e})),$.toPage(a,!0,!0)};window.CGTagEditing=function(t,i,o,s){var r=this;!function(){switch(o){case"delete":$.Dialog.confirm("Detele tag: "+t,"Deleting this tag will also remove it from every appearance where it's been used.<br>Are you sure?",["Delete it","Nope"],function(e){e&&($.Dialog.wait(!1,"Sending removal request"),$.post("/cg/deltag/"+i,$.mkAjaxHandler(function(){n.call(this,s,o)})))});break;case"synon":case"merge":var c="merge"===o,l=c?"Merge":"Synonymize";$.Dialog.wait(l+" "+t+" "+(c?"into":"with")+" another tag","Retrieving tag list from server"),$.post("/cg/gettags",{not:i,action:o},$.mkAjaxHandler(function(){if(!this.length)return this.undo?window.CGTagEditing.call(this,t,i,"unsynon",s):$.Dialog.fail(!1,this.message+"asdasasdasd");var a=$.mk("form","tag-"+o),r=$.mk("select").attr("required",!0).attr("name","targetid"),g={},u=[];$.each(this,function(t,n){var a=n.type,i='<option value="'+n.tid+'">'+n.name+"</option>";return a?("undefined"==typeof g[a]&&(g[a]=$.mk("optgroup").attr("label",e[a]),u.push(a)),void g[a].append(i)):r.append(i)}),$.each(u,function(e,t){r.append(g[t])}),a.append("<p>"+(c?"Merging a tag into another will permanently delete it, while replacing it with the merge target on every appearance which used it.":"Synonymizing a tag will keep both tags in the database, but when searching, the source tag will automatically redirect to the target tag.")+"</p>",$.mk("label").append("<span>"+l+" <strong>"+t+"</strong> "+(c?"into":"with")+" the following:</span>",r)),$.Dialog.request(!1,a,l,function(e){e.on("submit",function(t){t.preventDefault();var a=e.mkData();$.Dialog.wait(!1,(c?"Merging":"Synonymizing")+" tags"),$.post("/cg/"+o+"tag/"+i,a,$.mkAjaxHandler(function(){n.call(this,s,o)}))})})}));break;case"unsynon":var g=r.message;$.Dialog.close(function(){$.Dialog.confirm("Remove synonym from "+t,g,["Yes, continueâ€¦","Cancel"],function(e){if(e){var a=$(g).filter("strong").prop("outerHTML"),r=$.mk("form","synon-remove").html("<p>If you leave the option below checked, <strong>"+t+"</strong> will be added to all appearances where "+a+" is used, preserving how the tags worked while the synonym was active.</p>\n								<p>If you made these tags synonyms by accident and don't want <strong>"+t+"</strong> to be added to each appearance where "+a+' is used, you should uncheck the box below.</p>\n								<label><input type="checkbox" name="keep_tagged" checked><span>Preserve current tag connections</span></label>');$.Dialog.request(!1,r,"Remove synonym",function(e){e.on("submit",function(t){t.preventDefault();var a=e.mkData();$.Dialog.wait(!1,"Removing synonym"),$.post("/cg/unsynontag/"+i,a,$.mkAjaxHandler(function(){n.call(this,s,o)}))})})}})});break;case"refresh":$.Dialog.wait("Refresh use count of "+t,"Updating use count"),$.post("/cg/recounttag",{tagids:i},a())}}()},t.on("click","button",function(e){e.preventDefault();var t=$(this),n=t.parents("tr"),a=n.children().eq(1).text().trim(),i=parseInt(n.children().first().text().trim(),10),o=this.className.split(" ").pop();window.CGTagEditing(a,i,o,n)});var a=function(e){return $.mkAjaxHandler(function(){var n=this;this.status||$.Dialog.fail(!1,this.message),this.counts&&!function(){var e=n.counts;t.children().each(function(){var t=$(this).children(),n=parseInt(t.first().text().trim(),10);"undefined"!=typeof e[n]&&t.last().children("span").text(e[n])})}(),e?$.Dialog.success(!1,this.message,!0):$.Dialog.close()})};$(".refresh-all").on("click",function(){var e=[],n="Recalculate tag usage data";t.children().each(function(){e.push($(this).children().first().text().trim())}),$.Dialog.wait(n,"Updating use count"+(1!==e.length?"s":"")),$.post("/cg/recounttag",{tagids:e.join(",")},a(!0))})});
//# sourceMappingURL=colorguide-tags.min.js.map
